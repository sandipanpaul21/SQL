# SQL Create Constraints
# Constraints can be specified when the table is created with the CREATE TABLE statement
# or after the table is created with the ALTER TABLE statement.
# Syntax : CREATE TABLE table_name ( column1 datatype constraint, column2 datatype constraint,... )

# SQL Constraints
# SQL constraints are used to specify rules for the data in a table.
# Constraints are used to limit the type of data that can go into a table. 
# This ensures the accuracy and reliability of the data in the table. 
# If there is any violation between the constraint and the data action, the action is aborted.
# Constraints can be column level or table level. 
# Column level constraints apply to a column, and table level constraints apply to the whole table.

# The following constraints are commonly used in SQL:
# 1. NOT NULL - Ensures that a column cannot have a NULL value
# 2. UNIQUE - Ensures that all values in a column are different
# 3. PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
# 4. FOREIGN KEY - Prevents actions that would destroy links between tables
# 5. CHECK - Ensures that the values in a column satisfies a specific condition
# 6. DEFAULT - Sets a default value for a column if no value is specified
# 7. CREATE INDEX - Used to create and retrieve data from the database very quickly

# SQL NOT NULL Constraint
# By default, a column can hold NULL values.
# The NOT NULL constraint enforces a column to NOT accept NULL values.
# This enforces a field to always contain a value, which means that you cannot insert a new record, 
# or update a record without adding a value to this field.

# SQL NOT NULL on CREATE TABLE
# The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept NULL values 
# when the "Persons" table is created:
# If already create DROP

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	ID INT NOT NULL,
	LastName VARCHAR(255) NOT NULL,
	FirstName VARCHAR(255) NOT NULL,
	Age INT
)

# SQL NOT NULL on ALTER TABLE
# To create a NOT NULL constraint on the "Age" column when the "Persons" table is already created, 
# use the following SQL:

ALTER TABLE testDB.Persons 
MODIFY Age INT NOT NULL

# SQL UNIQUE Constraint
# The UNIQUE constraint ensures that all values in a column are different.
# Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.
# A PRIMARY KEY constraint automatically has a UNIQUE constraint.
# However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.

# SQL UNIQUE Constraint on CREATE TABLE
# The following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	ID INT NOT NULL,
	LastName VARCHAR(255) NOT NULL,
	FirstName VARCHAR(255) NOT NULL,
	Age INT,
	UNIQUE(ID)
)

# UNIQUE Constraint on ALTER TABLE
# To create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:
 
 ALTER TABLE testDB.Persons
 ADD UNIQUE(AGE)
 
# DROP a UNIQUE Constraint
# To drop a UNIQUE constraint, use the following SQL:

ALTER TABLE testDB.Persons
DROP INDEX AGE

# PRIMARY KEY Constraint
# The PRIMARY KEY constraint uniquely identifies each record in a table.
# Primary keys must contain UNIQUE values, and cannot contain NULL values.
# A table can have only ONE primary key
# and in the table, this primary key can consist of single or multiple columns (fields).

# SQL PRIMARY KEY on CREATE TABLE
# The following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	Id INT NOT NULL,
	LastName VARCHAR(300) NOT NULL,
	FirstName VARCHAR(300) NOT NULL,
	PRIMARY KEY(ID)
)

# To allow naming of a PRIMARY KEY constraint
# For defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	Id INT NOT NULL,
	LastName VARCHAR(300) NOT NULL,
	FirstName VARCHAR(300) NOT NULL,
	CONSTRAINT PK_Persons PRIMARY KEY (Id,LastName)
)

# In the example above there is only ONE PRIMARY KEY (PK_Person). 
# However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).

# DROP a PRIMARY KEY Constraint
 #To drop a PRIMARY KEY constraint, use the following SQL:
 
 ALTER TABLE testDB.Persons
 DROP PRIMARY KEY

# PRIMARY KEY on ALTER TABLE
# To create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:

ALTER TABLE testDB.Persons
ADD PRIMARY KEY (ID)

# SQL FOREIGN KEY Constraint
# The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
# A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.
# The table with the foreign key is called the child table
# and the table with the primary key is called the referenced or parent table.
# Table Persons (PersonID	LastName	FirstName	Age)
# Table Table (OrderID	OrderNumber	PersonID)
# Notice that the "PersonID" column in the "Orders" table points to the "PersonID" column in the "Persons" table.
# The "PersonID" column in the "Persons" table is the PRIMARY KEY in the "Persons" table.
# The "PersonID" column in the "Orders" table is a FOREIGN KEY in the "Orders" table.
# The FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column
# because it has to be one of the values contained in the parent table.

# SQL FOREIGN KEY on CREATE TABLE
# The following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:

DROP TABLE testDB.Orders

CREATE TABLE testDB.Orders(
	OrderID INT NOT NULL,
	OrderNumber INT NOT NULL,
	PersonID INT,
	PRIMARY KEY(OrderID),
	FOREIGN KEY(PersonID) REFERENCES testDB.Persons(Id)
)

# FOREIGN KEY on ALTER TABLE
# To create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created

ALTER TABLE testDB.Orders
ADD CONSTRAINT FK_PersonID
FOREIGN KEY(PersonID) REFERENCES testDB.Persons(Id)

# DROP a FOREIGN KEY Constraint

ALTER TABLE testDB.Orders
DROP FOREIGN KEY FK_PersonID	

# CHECK Constraint
# The CHECK constraint is used to limit the value range that can be placed in a column.
# If you define a CHECK constraint on a column it will allow only certain values for this column.
# If you define a CHECK constraint on a table it can limit the values in certain columns based on values 
# in other columns in the row.

# CHECK on CREATE TABLE
# The following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created. 
# The CHECK constraint ensures that the age of a person must be 18, or older:


DROP TABLE testDB.Orders
DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	ID INT NOT NULL,
	LastName VARCHAR(300) NOT NULL,
	FirstName VARCHAR(300) NOT NULL,
	Age INT,
	CHECK(AGE >= 18)
)

# To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns:

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	ID INT NOT NULL,
	LastName VARCHAR(300) NOT NULL,
	FirstName VARCHAR(300) NOT NULL,
	Age INT,
	City VARCHAR(20),
	CONSTRAINT CHK_Perosn CHECK(AGE >= 18 AND City = 'PUNE')
)

# CHECK on ALTER TABLE
# To create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:

ALTER TABLE testDB.Persons
ADD CHECK(Age >= 20) 

# To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns:

ALTER TABLE testDB.Persons
ADD CONSTRAINT CHK_PersonAgeCityPune CHECK(Age >= 18 AND City = 'Pune')

# DROP a CHECK Constraint
# To drop a CHECK constraint, use the following SQL:

ALTER TABLE testDB.Persons
DROP CHECK CHK_PersonAgeCityPune

# DEFAULT on CREATE TABLE
# The following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons(
	Id INT NOT NULL,
	LastName VARCHAR(25) NOT NULL,
	FirstName VARCHAR(25) NOT NULL,
	Age INT,
	City VARCHAR(200) DEFAULT 'Pune'
)

# DEFAULT on ALTER TABLE
# To create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:

ALTER TABLE testDB.Persons
ALTER City SET DEFAULT 'Mumbai'

# CREATE INDEX Statement
# The CREATE INDEX statement is used to create indexes in tables.
# Indexes are used to retrieve data from the database more quickly than otherwise. 
# The users cannot see the indexes, they are just used to speed up searches/queries.
# Syntax : CREATE INDEX index_name ON table_name (column1, column2, ...);

# UNIQUE INDEX Syntax
# Creates a unique index on a table. Duplicate values are not allowed:
# Syntax : CREATE UNIQUE INDEX index_name ON table_name (column1, column2, ...);

CREATE INDEX idx_LastName
ON testDB.Persons(LastName)

CREATE UNIQUE INDEX idx_FirstName
ON testDB.Persons(FirstName)

# DROP INDEX Statement
# The DROP INDEX statement is used to delete an index in a table.
# Syntax : ALTER TABLE table_name DROP INDEX index_name;

ALTER TABLE testDB.Persons
DROP INDEX idx_FirstName

# AUTO INCREMENT Field
# Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
# Often this is the primary key field 
# that we would like to be created automatically every time a new record is inserted.

DROP TABLE testDB.Persons

CREATE TABLE testDB.Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
)

# MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.
# By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.
# To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:

ALTER TABLE testDB.Persons AUTO_INCREMENT=100;
