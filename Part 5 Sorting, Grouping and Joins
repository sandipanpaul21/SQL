# In SQL, the ORDER BY keyword is used to sort results in ascending or descending order according to the values of one or more columns.
# By default ORDER BY will sort in ascending order.
# If you want to sort the results in descending order, you can use the DESC keyword. For example,

SELECT title FROM films
ORDER BY release_year DESC;

# gives you the titles of films sorted by release year, from newest to oldest. In case of text, it sort alphabetically

# Get the names of people from the people table, sorted alphabetically.

SELECT name FROM people
ORDER BY name;

# Get the names of people, sorted by birth date.

SELECT name FROM people
ORDER BY birthdate; 

# Get the birth date and name for every person, in order of when they were born.

SELECT birthdate, name FROM people
ORDER BY birthdate; 

# Get the title of films released in 2000 or 2012, in the order they were released.

SELECT title FROM films
WHERE release_year IN (2000,2012)
ORDER BY release_year;

# Get all details for all films except those released in 2015 and order them by duration.

SELECT * FROM films
WHERE release_year <> 2015
ORDER BY duration;

# Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.

SELECT title,gross FROM films
WHERE title like 'M%'
ORDER BY title;

# Sorting single columns (DESC)
# To order results in descending order, you can put the keyword DESC after your ORDER BY. 
# For example, to get all the names in the people table, in reverse alphabetical order:

SELECT name
FROM people
ORDER BY name DESC;

# Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.

SELECT imdb_score, film_id FROM reviews
ORDER BY imdb_score DESC;

# Get the title for every film, in reverse order.

SELECT title FROM films
ORDER BY title DESC;

# Get the title and duration for every film, in order of longest duration to shortest.

SELECT title,duration FROM films
ORDER BY duration DESC;

# Sorting multiple columns
# ORDER BY can also be used to sort on multiple columns. 
# It will sort by the first column specified, then sort by the next, then the next, and so on. For example,

SELECT birthdate, name
FROM people
ORDER BY birthdate, name;

# sorts on birth dates first (oldest to newest) and then sorts on the names in alphabetical order. The order of columns is important!

# Get the release year, duration, and title of films ordered by their release year and duration.

SELECT release_year,duration,title FROM films
ORDER BY release_year,duration;

# Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.

SELECT certification, release_year,title FROM films
ORDER BY certification,release_year;

# Get the names and birthdates of people ordered by name and birth date.

SELECT name, birthdate FROM people
ORDER BY name, birthdate;


# GROUP BY
# Now you know how to sort results! Often you'll need to aggregate results. 
# For example, you might want to count the number of male and female employees in your company. 
# Here, what you want is to group all the males together and count them, and group all the females together and count them. 
# In SQL, GROUP BY allows you to group a result by one or more columns, like so:

SELECT sex, count(*)
FROM employees
GROUP BY sex;

# Note that GROUP BY always goes after the FROM clause!

# GROUP BY practice
# A word of warning: SQL will return an error if you try to SELECT a field that is not in your GROUP BY clause without using it to calculate some kind of value about the entire group.
# Note that you can combine GROUP BY with ORDER BY to group your results, calculate something about them, and then order your results.
# For example,

SELECT sex, count(*)
FROM employees
GROUP BY sex
ORDER BY count DESC;

# Get the release year and count of films released in each year.

SELECT release_year, count(*)
FROM films
GROUP BY release_year;

# Get the release year and average duration of all films, grouped by release year.

SELECT release_year, AVG(duration)
FROM films
GROUP BY release_year;

# Get the release year and largest budget for all films, grouped by release year.

SELECT release_year, MAX(budget)
FROM films
GROUP BY release_year;

# Get the IMDB score and count of film reviews grouped by IMDB score in the reviews table.

SELECT imdb_score, COUNT(*)
FROM reviews
GROUP BY imdb_score;

# Get the release year and lowest gross earnings per release year.

SELECT release_year,MIN(gross)
FROM films
GROUP BY release_year;

# Get the language and total gross amount films in each language made.

SELECT language,SUM(gross)
FROM films
GROUP BY language;

# Get the country and total budget spent making movies in each country.

SELECT country,SUM(budget)
FROM films
GROUP BY country;

# Get the release year, country, and highest budget spent making a film for each year, for each country. 
# Sort your results by release year and country.

SELECT release_year, country,max(budget)
FROM films
GROUP BY release_year,country
ORDER BY release_year,country;

# Get the country, release year, and lowest amount grossed per release year per country. 
# Order your results by country and release year.

SELECT country, release_year, MIN(gross)
FROM films
GROUP BY country, release_year
ORDER BY country,release_year;


# Having Clause
# For example,

SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 10;

# shows only those years in which more than 10 films were released.

# Write a query that returns the average budget and average gross earnings for films in each year after 1990, if the average budget is greater than $60 million.

# Step by step

# Get the release year, budget and gross earnings for each film in the films table.

SELECT release_year, budget, gross
FROM films

# Modify your query so that only records with a release_year after 1990 are included.

SELECT release_year, budget, gross
FROM films
WHERE release_year > 1990

# Remove the budget and gross columns, and group your results by release year.

SELECT release_year
FROM films
WHERE release_year > 1990
GROUP BY release_year

# Modify your query to include the average budget and average gross earnings for the results you have so far. Alias the average budget as avg_budget; alias the average gross earnings as avg_gross.

SELECT release_year, AVG(budget) as avg_budget, AVG(gross) as avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year

# Modify your query so that only years with an average budget of greater than $60 million are included.

SELECT release_year, AVG(budget) as avg_budget, AVG(gross) as avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000

# Finally, modify your query to order the results from highest average gross earnings to lowest.

SELECT release_year, AVG(budget) as avg_budget, AVG(gross) as avg_gross
FROM films
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
ORDER BY AVG(gross) DESC

# Get the country, average budget, and average gross take of countries that have made more than 10 films.
# Order the result by country name, and limit the number of results displayed to 5.
# You should alias the averages as avg_budget and avg_gross respectively.

# select country, average budget, average gross

SELECT country, AVG(budget) as avg_budget, AVG(gross) as avg_gross FROM films 

# group by country 

GROUP BY country

# where the country has more than 10 titles

HAVING COUNT(title) > 10

# order by country
ORDER BY country LIMIT 5

