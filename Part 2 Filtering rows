# Filtering of numeric values

# WHERE clause is used to filter numeric records

# Get all details for all films released in 2016.

SELECT * FROM films WHERE release_year = 2016;

# Get the number of films released before 2000.

SELECT COUNT(*) FROM films WHERE release_year < 2000;

# Get the title and release year of films released after 2000.

SELECT title,release_year FROM films WHERE release_year > 2000;


# Simple filtering of text

# Remember, the WHERE clause can also be used to filter text results, such as names or countries.

# Get all details for all French language films.

SELECT * FROM films WHERE language = 'French'; 

# Get the name and birth date of the person born on November 11th, 1974. Remember to use ISO date format ('1974-11-11')!

SELECT name,birthdate FROM people WHERE birthdate = '1974-11-11'; 

# Get the number of Hindi language films.

SELECT COUNT(*) FROM films WHERE language = 'Hindi'; 

# Get all details for all films with an R certification.

SELECT * FROM films WHERE certification = 'R';


# WHERE AND (Multiple Conditions)

# Often, you'll want to select data based on multiple conditions. 

# You can build up your WHERE queries by combining multiple conditions with the AND keyword.

# For example,

SELECT title FROM films WHERE release_year > 1994 AND release_year < 2000; #gives you the titles of films released between 1994 and 2000.

# Note that you need to specify the column name separately for every AND condition, so the following would be invalid:

SELECT title FROM films WHERE release_year > 1994 AND < 2000;

# You can add as many AND conditions as you need!

# Get the title and release year for all Spanish language films released before 2000.

SELECT title, release_year FROM films WHERE language = 'Spanish' AND release_year < 2000;

# Get all details for Spanish language films released after 2000.

SELECT * FROM films WHERE language = 'Spanish' AND release_year > 2000;

# Get all details for Spanish language films released after 2000, but before 2010.

SELECT * FROM films WHERE language = 'Spanish' AND release_year > 2000 AND release_year < 2010;


#WHERE AND OR

# What if you want to select rows based on multiple conditions where some but not all of the conditions need to be met? 

# For this, SQL has the OR operator.

# For example, the following returns all films released in either 1994 or 2000:

SELECT title FROM films
WHERE release_year = 1994
OR release_year = 2000;

# Note that you need to specify the column for every OR condition, so the following is invalid:

SELECT title FROM films
WHERE release_year = 1994 OR 2000;

# When combining AND and OR, be sure to enclose the individual clauses in parentheses, like so:

SELECT title FROM films
WHERE (release_year = 1994 OR release_year = 1995)
AND (certification = 'PG' OR certification = 'R');

# Otherwise, due to SQL's precedence rules, you may not get the results you're expecting!

# What does the OR operator do? Ans is Display only rows that meet at least one of the specified conditions.

# The following query selects all films that were released in 1994 or 1995 which had a rating of PG or R.

SELECT title FROM films
WHERE (release_year = 1994 OR release_year = 1995)
AND (certification = 'PG' OR certification = 'R');

# Write a query to get the title and release year of films released in the 90s which were in French or Spanish and which took in more than $2M gross.

SELECT title, release_year
FROM films
WHERE release_year >= 1990 AND release_year < 2000
AND (language = 'Spanish' OR language = 'French')
AND gross > 2000000;


# BETWEEN

# As you've learned, you can use the following query to get titles of all films released in and between 1994 and 2000:

SELECT title
FROM films
WHERE release_year >= 1994
AND release_year <= 2000;

# Checking for ranges like this is very common, so in SQL the BETWEEN keyword provides a useful shorthand for filtering values within a specified range. This query is equivalent to the one above:

SELECT title
FROM films
WHERE release_year
BETWEEN 1994 AND 2000;

# It's important to remember that BETWEEN is inclusive, meaning the beginning and end values are included in the results!




